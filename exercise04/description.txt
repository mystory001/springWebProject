* 서버의 역할
- 과거 서버의 데이터를 소비하는 주체가 '브라우저'로 제한적, 최근 앱이나 웹은 서버에서 제공하는 데이터를 소비
- 순순하게 데이터에 대한 처리를 목적으로 하는 형태로 진화
- 서버에서 전달하는 데이터를 이용해서 앱 혹은 브라우저 내부에서 별도의 방식을 통해 이를 소비하는 형태로 전환

* URL, URI
- URL(Uniform Resource Locator), URI(Uniform Resource Identifier)
- URL은 URI의 하위 개념, URI는 자원의 식별자라는 의미로 사용
- URL : 여기로 가면 원하는 것을 찾을 수 있음
- URI : 원하는 것의 주소는 여기
- URI의 I는 데이터베이스의 PK와 같은 의미로 사용

* REST(Representational State Transfer)
- 하나의 URI는 하나의 고유한 리소스를 대표하도록 설계된다는 개념에 전송방식을 결합해서 원하는 작업을 지정
- URI + GET/POST/PUT/DELETE

* REST와 관련한 어노테이션
- @RestController : Controller가 REST 방식을 처리하기 위한 것임을 명시
- @ResponseBody : JSP와 같은 뷰로 전달되는 것이 아닌 데이터 자체를 전달하기 위한 용도
- @RequestBody : JSON 데이터를 원하는 타입으로 바인딩 처리
- @PathVariable : URL 경로에 있는 값을 파라미터로 추출하려고 할 때 사용
- @CrossOrigin : Ajax의 크로스 도메인 문제를 해결해주는 어노테이션

* @RestController
- 서버에서 전송하는 것이 순수한 데이터
- 기존의 Controller에서 Model에 데이터를 담아서 JSP 등과 같은 뷰로 전달하는 방식이 아니고, 기존 Controller와 다르게 동작
- 메서드의 리턴 타입으로 사용자가 정의한 클래스 타입을 사용할 수 있고, 이를 JSON이나 XML로 자동으로 처리할 수 있음

* @RestController에서 파라미터
- 기존의 @Controller에서 사용하던 일반적인 타입이나 사용자가 정의한 타입을 사용 → 몇 가지 어노테이션을 이용(@PathVariable, @RequestBody)

* @PathVariable
- http://localhost:8080/sample/{bno} 에서 {} 처리된 부분은 컨트롤러의 메서드에서 변수로 처리가 가능, @PathVariable은 {}의 이름을 처리할 때 사용
- REST 방식에서는 URL 자체에 데이터를 식별할 수 있는 정보들을 표현하는 경우가 많으므로 다양한 방식으로 사용됨
- @PathVariable을 적용할 때 {}를 이용해서 변수명을 지정하고, @PathVariable을 이용해서 지정된 이름의 변숫값을 얻을 수 있음. 값을 얻을 때에는 기본 자료형을 사용할 수 없음

* @RequestBody
- 전달된 요청(request)의 내용(body)을 이용해서 해당 파라미터의 타입으로 변환을 요구, 내부적으로 HttpMessageConverter 타입의 객체들을 이용해서 다양한 포맷의 입력 데이터를 변환
- 대부분 JSON 데이터를 서버에 보내서 원하는 타입의 객체로 변환하는 용도로 사용(경우에 따라서는 원하는 포맷의 데이터를 보내고, 원하는 타입으로 사용하기도 함)
- 요청(request)한 내용(body)을 처리하기 때문에 파라미터 전달방식을 사용할 수 없기 때문에 PostMapping을 사용해야함 → URI로 접속 불가

* 다양한 전송방식
- REST 방식의 데이터 교환에서는 GET/POST 외에 다양한 방식으로 데이터를 전달
- 작업-전송방식 : Create - POST, Read - GET, Update - PUT, Delete - DELETE

※ REST 방식을 가장 많이 사용하는 형태는 Ajax를 이용해서 호출

* 댓글 처리를 위한 영속 영역
- 댓글 구조에 맞는 테이블 설계
create table reply(
					rno number(10,0),
					bno number(10,0),
					reply varchar2(1000) not null,
					replyer varchar2(50) not null,
					replydate date default sysdate,
					updatedate date default sysdate
				  );

-- 시퀀스 생성 및 설정
create sequence seq_reply
increment by 1
start with 1
minvalue 1
maxvalue 9999999999999999999999999999
order;

-- PK 설정
alter table reply add constraint reply_pk primary key(rno);

-- FK 설정
alter table reply add constraint reply_fk foreign key (bno) references board(bno); 

* @Param 어노테이션
- 댓글의 목록과 페이징 처리는 기존 게시물 페이징 처리와 유사하지만, 추가적으로 특정한 게시물의 댓글들만을 대상으로 하기에 추가로 게시물의 번호가 필요
- MyBatis는 두 개 이상의 데이터를 파라미터로 전달하기 위해서
  1) 별도의 객체로 구성
  2) Map을 이용하는 방식
  3) @Param을 이용해서 이름을 사용하는 방식 → @Param의 속성값은 MyBatis에서 SQL을 이용할 때 #{}의 이름으로 사용이 가능

* JavaScript 이용
- JSP 내에서 댓글에 대한 처리는 하나의 페이지 내에서 모든 작업이 이루어짐
- 기존과 달리 JavaScript와 동적으로 만들어지는 HTML로 처리
- JavaScript의 모듈화 : 화면에서 사용되는 jQuery는 기능과 다양한 플러그인을 통해서 많은 프로젝트에서 기본으로 사용
					Ajax를 이용하는 경우 jQuery의 함수를 이용해서 쉽게 처리할 수 있기에 많이 사용
					화면 내에서 JavaScript 처리를 하다보면 코드가 섞여 유지보수 하기 힘든 코드를 만드는 경우가 많음 → 하나의 모듈처럼 구성하는 방식을 이용 → JavaScript에서 가장 많이 사용하는 패턴 중 하나인 모듈 패턴
					※모듈 패턴 : 관련 있는 함수들을 하나의 모듈처럼 묶음으로 구성하는 것을 의미

* 시간에 대한 처리
- XML이나 JSON 형태로 데이터를 받을 때순수하게 숫자로 표현되는 시간 값이 나오게 되어 있으므로, 화면에서 이를 변환해서 사용
- 날짜 포맷의 경우 다양하기 때문에 화면에서 포맷을 처리하는 방식을 권함

* 데이터베이스 인덱스 설계
- 댓글에 접근할 때 댓글 번호가 중심이 아니라 게시물 번호가 중심이 되어야함 create index reply_idx on reply (bno desc, rno asc);
- 인덱스를 이용하는 이유는 정렬을 피할 수 있기 때문

* 댓글 페이지의 화면 처리
- 방식
  1) 게시물을 조회하는 페이지에 들어오면 기본적으로 가장 오래된 댓글들을 가져와서 1 페이지에 보이기
  2) 1 페이지의 게시물을 가져올 때 해당 게시물의 댓글의 숫자를 파악해서 댓글의 페이지 번호를 출력
  3) 댓글이 추가되면 댓글의 숫자만을 가져와서 최종 페이지를 찾아 이동
  4) 댓글의 수정과 삭제 후에는 다시 동시 페이지를 호출

* 댓글과 댓글 수 처리
alter table board add(replycnt number default 0);
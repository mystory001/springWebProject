* AOP(Aspect-Oriented-Programming), 관점 지향 프로그래밍
- 별도의 관심사로 분리하고 핵심 비즈니스 로직만 작성할 수 있게 함, 관심사와 비즈니스 로직을 분리해서 별도의 코드로 작성하고 실행할 때 이를 결합하는 방식으로 접근
- AOP : 기존의 코드를 수정하지 않고 원하는 기능들과 결합할 수 있는 패러다임
- Target : 핵심 비즈니스 로직을 가지는 객체, 순수한 코어
- Proxy : Target을 전체적으로 감싸고 있는 존재, 내부적으로 Target을 호출하지만, 중간에 필요한 관심사들을 거쳐서 Target을 호출하도록 함(스프링 AOP 기능을 이용해 자동으로 생성되는 auto-proxy 방식을 이용)
- JointPoint : Target 객체가 가진 메서드, 외부에서의 호출은 Proxxy 객체를 통해서 Target 객체의 JointPoint를 호출하는 방식
- Pointcut : Target에는 여러 메서드가 존재하기 때문에 어떤 메서드에 관심사를 결합할 것인지를 결정 해야하는 결정, 관심사와 비즈니스 로직이 결합되는 지점을 결정
			 Advice를 어떤 JoinPoint에 결합할 것인지를 결정하는 설정 : execution(@execution) : 메서드를 기준으로 Pointcut을 설정
			 											within(@within) : 특정한 타입(클래스)을 기준으로 Pointcut을 설정
			 											this : 주어진 인터페이스를 구현한 객체를 대상으로 Pointcut으로 설정
			 											@annotation : 특정한 어노테이션이 적용된 대상들만을 Pointcut으로 설정
- Advice : 실제 걱정거리를 분리해 놓은 코드,
		   동작 위치에 따라 구분 : Before Advice : Target의 JoinPoint를 호출하기 전에 실행되는 코드. 코드의 실행 자체에는 관여할 수 없음
		   				   After Returning Advice : 모든 실행이 정상적으로 이루어진 후에 동작하는 코드
		   				   After Throwing Advice : 예외가 발생한 뒤에 동작하는 코드
		   				   After Advice : 정상적으로 실행되거나 예외가 발생했을 때 구분 없이 실행되는 코드
		   				   Around Advice : 메서드의  실행 자체를 제어할 수 있는 코드, 직접 대상 메서드를 호출하고 결과나 예외를 처리할 수 있음

* 트랜잭션 : 비즈니스에서 쪼개질 수 없는 하나의 작업 단위
- ACID : 원자성(Atomicity) : 하나의 트랜잭션은 모두 하나의 단위로 처리되어야함
		 일관성(Consistency) : 트랜잭션이 성공했다면 데이터베이스의 모든 데이터는 일관성을 유지해야함
		 격리(Isolation) : 트랜잭션으로 처리되는 중간에 외부의 간섭이 없어야함
		 영속성(Durablility) : 트랜잭션이 성공적으로 처리되면 그 결과는 영속적으로 보관
		 

* 정규화
- 데이터베이스의 저장 구조를 효율적으로 관리하는 작업 → 중복 데이터를 제거해서 데이터 저장의 효율을 올리고자 하는 것
- 정규화 진행에서 테이블을 늘어나고, 각 테이블의 데이터 양은 줄어드는 것이 일반적
- 원칙적으로 컬럼으로 치리되지 않는 데이터 : 시간이 흐르면 변경되는 데이터를 컬럼으로 기록하지 않음, 계산이 가능한 데이터를 컬럼으로 기록하지 않음, 누구에게나 정해진 값을 이용하는 경우 데이터베이스에서 취급하지 않음
- 정규화를 진행할수록 테이블은 더욱 간결해지지만 쿼리 등을 이용해서 필요한 데이터를 가져오는 입장에서는 점점 불편해짐, 현재 상황을 알기 위해서 단순히 조회를 하는 것이 아닌 조인이나 서브쿼리를 이용해서 처리해야하기 때문 → 성능 이슈가 발생 → 반정규화

* 반정규화
- 예시) 게시물-댓글
- 중복이나 계산의 결과를 미리 보관해서 좀 더 빠른 결과를 얻기 위한 노력
- 쿼리가 단순해지고 성능상으로도 얻을 수 있는 이득이 있음

* 예제 테이블
create table sample1(col1 varchar2(500));
create table sample2(col2 varchar2(50));

* @Transactional 어노테이션 속성
- 스프링에서 트랜잭션을 처리하기 위해 제공되는 @Transactional 어노테이션을 이용하면 간단히 트랜잭션 설정을 완료할 수 있음
- Progagation 속성 : PROPAGATION_MADATORY : 작업은 반드시 특정한 트랜잭션이 존재한 상태에서만 가능
				   PROPAGATION_NESTED : 기존에 트랜잭션이 있는 경우, 포함되어 실행
				   PROPAGATION_NEVER : 트랜잭션 상황하에 실행되면 예외 발생
				   PROPAGATION_NOT_SUPPORTED : 트랜잭션이 있는 경우엔 트랜잭션이 끝날 때까지 보류된 후 실행
				   PROPAGATION_REQUIRED : 트랜잭션이 있으면 그 상황에서 실행, 없으면 새로운 트랜잭션 실행(default)
				   PROPAGATION_REQUIRED_NEW : 대상은 자신만의 고유한 트랜잭션으로 실행
				   PROPAGATION_SUPPORTS : 트랜잭션을 필요로 하지 않으나, 트랜잭션 상황하에 있다면 포함되어 실행
- Isloation 레벨 : DEFAULT : DB 설정. 기본 격리 수준(기본 설정)
				 SERIALIZABLE : 가장 높은 격리, 성능 저하의 우려 존재
				 READ_UNCOMMITED : 커밋되지 않은 데이터에 대한 읽기를 허용
				 READ_COMMIT : 커밋된 데이터에 대해 읽기 허용
				 REPEATEABLE_READ : 동일 필드에 대해 다중 접근 시 모두 동일한 결과를 보장
- Read-only 속성 : true인 경우 update, delete 실행 시 예외 발생, 기본 설정 false
- Rollback-for-예외 : 특정 예외가 발생 시 강제로 Rollback
- No-rollback-for-예외 : 특정 예외의 발생 시에는 Rollback 처리되지 않음
- 적용 순서 : 메서드 > 클래스 > 인터페이스 → 인터페이스에는 가장 기준이 되는 @Transcation과 같은 설정을 지정하고, 클래스나 메서드에 필요한 어노테이션을 처리하는 것이 좋음





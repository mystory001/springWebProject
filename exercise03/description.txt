* 스프링 MVC 프로젝트의 기본 구성
- 스프링 MVC를 이용하는 프로젝트의 구성을 이해하는 일은 전체 데이터의 흐름을 보기 위해서임
- 브라우저에서 전송한 데이터를 스프링 MVC의 어떤 단계를 거쳐서 실행되는지를 이해한다면 문제가 발생했을 때 빠른 대처와 대안을 찾을 수 있음
- 웹 프로젝트는 3tier방식으로 구성(Presentation, Business, Persistence)
- Presentation tier : 화면에 보여주는 기술을 사용하는 영역, Servlet/JSP나 스프링 MVC가 담당하는 영역
- Business tier : 순수한 비즈니스 로직을 담고 있는 영역. 고객이 원하는 요구 사항을 반영하는 계층
- Persistence tier : 데이터를 어떤 방식으로 보관하고, 사용하는가에 대한 설계가 들어가는 계층. 데이터베이스를 많이 이용하지만, 경우에 따라서 네트워크 호출이나 원격 호출 등의 기술이 접목될 수 있음

* 각 영역의 명명 규칙
- Controller : 스프링 MVC에서 동작하는 Controller 클래스를 설계할 때 사용
- Service, ServiceImpl : 비즈니스 영역을 담당하는 인터페이스는 Service, 인터페이스를 구현한 클래스는 ServiceImpl로 사용
- DAO, Repository : DAO나 Repository라는 이름으로 영역을 따로 구성하는 것이 보편적
- VO, DTO : 데이터를 담고 있는 객체를 의미. VO의 경우 주로 ReadOnly의 목적이 강하며 데이터 자체도 불변하게 설계, DTO는 주로 데이터 수집의 용도가 강함

* 패키지의 명명 규칙
- 규모가 작은 프로젝트는 Controller 영역을 별도의 패키지로 설계하고, Service 영역 등을 하나의 패키지로 설계
- 규모가 큰 경우 비즈니스를 단위별로 구분하고 다시 내부에서 Controller 패키지, Service 패키지 등으로 다시 나누는 방식을 이용
ex)
com.mystroy001 
			 ㄴ------ com.mystory001.config : 프로젝트와 관련된 설정 클래스들의 보관 패키지
             ㄴ------ com.mystory001.controller : 스프링 MVC Controller들의 보관 패키지
             ㄴ------ com.mystory001.service : 스프링의 Service 인터페이스/클래스와 구현 클래스 패키지
             ㄴ------ com.mystory001.domain : VO, DTO 클래스들의 패키지
             ㄴ------ com.mystory001.persistence : MyBatis Mapper 인터페이스 패키지
             ㄴ------ com.mystory001.exception : 웹 관련 예외처리 패키지
             ㄴ------ com.mystory001.aop : 스프링의 AOP 관련 패키지
             ㄴ------ com.mystory001.security : 스프링의 security 관련 패키지
             ㄴ------ com.mystory001.util : 각종 유틸리티 클래스 관련 패키지
             
* 프로젝트를 위한 요구사항
- 프로젝트를 진행하기 전에 고객의 요구사항을 인식하고, 이를 설계하는 과정이 필요. 이를 요구사항 분석 설계
- 고객이 원하는 내용이 무엇이고, 어느 정도까지 구현할 것인가에 대한 프로젝트의 범위를 정하는 것을 목적
- 프로젝트에서는 단계를 정확히 구분해 주는 것이 좋음
- 온전한 문장으로 정리하는 것이 좋음. 주어는 '고객' 목적어는 '대상' ex) 고객은 새로운 게시물을 등록할 수 있어야 한다., 고객은 특정한 게시물을 조회할 수 있어야 한다.
               
* 테이블 SQL
create SEQUENCE board_seq;

create table board(
    bno NUMBER(10,0),
    title varchar2(200) not null,
    content varchar2(2000) not null,
    writer varchar2(50) not null,
    regdate date default sysdate,
    updatedate date default sysdate
);

alter table board add constraint board_pk
primary key (bno);               

* 영속 계층 작업
- 테이블의 컬럼 구조를 반영하는 VO(Value Object) 클래스의 생성
- MyBatis의 Mapper 인터페이스의 작성/ XML 처리
- 작성한 Mapper 인터페이스의 테스트

* 영속 계층
- 데이터에 대한 CRUD 작업

* 비즈니스 계층
- 고객의 요구사항을 반영하는 계층, 프레젠테이션 계층과 영속 계층의 중간 다리 역할. 영속 계층은 데이터베이스를 기준으로 해서 설계를 나눠 구현하지만, 비즈니스 계층은 로직을 기준으로 해서 처리
- 비즈니스 영역에 있는 객체들은 서비스라는 용어를 많이 사용

* Controller
- 하나의 클래스 내에 여러 메서드를 작성하고, @RequestMapping 등을 이용해 URL을 분기하는 구조로 작성

* redirect
- 등록, 수정, 삭제 작업은 처리가 완료된 후 다시 동일한 내용을 전송할 수 없도록 브라우저의 URL을 이동하는 방식을 이용. 이 과정에서 브라우저에 등록, 수정, 삭제의 결과를 바로 알 수 있게 피드백 해줘야 함
- redirect 처리 할 때 RedirectAttributes라는 객체를 이용 addFlashAttribute()의 경우 일회성으로만 데이터를 전달할 수 있음

* order by
- 데이터의 양이 많을수록 정렬은 많은 리소스를 소모함
- 데이터베이스를 이용할 때 빠르게 처리, 필요한 양만큼만 데이터를 가져오는 것
- 데이터가 맣은 경우 order by는 성능 저하를 가져옴 따라서 데이터가 적은 경우, 정렬을 빠르게 할 수 있는 방법이 있는 경우에만 사용
- SQL 파싱(SQL 구문에 오류가 있는지 SQL을 실행해야 하는 대상 객체가 존재하는지 확인) → SQL 최적화(SQL이 실행되는데 필요한 비용을 계산, 어떤 방식으로 실행하는 것이 가장 좋다느 것을 판단하는 실행 계획을 세우게 됨) → SQL 실행(실행 계획을 통해 메모리상에서 데이터를 읽거나 물리적인 공간에서 데이터를 로딩하는 등의 작업)
- 더미 데이터 생성 → insert into board(bno, title, content, writer) (select seq_board.nextval, title, content, writer from board);
  ㄴ test에서 for문을 이용해서 데이터 생성
  ㄴ 	public void testInsert() {
		log.info("BoardMapper testInsert().....................");
		boardVO.setTitle("더미 데이터");
		boardVO.setContent("더미 데이터");
		boardVO.setWriter("더미 데이터");
		long start = System.currentTimeMillis();
		for(int i = 0; i < 100000; i++) {
			boardMapper.insert(boardVO);
		}
		long end = System.currentTimeMillis();
		
		log.info("100000건의 데이터를 넣는데 걸린 시간");
		log.info(end - start); // 22923
- 데이터가 많은 상태에서 정렬 작업이 문제가 됨 → 인덱스를 이용해 정렬을 생략하는 방법을 이용됨, ※ 인덱스 : 별도의 정렬을 하지 않는 방법
- 테이블은 중간에 순서가 섞여 있는 경우가 대부분인데 인덱스와 실제 테이블을 연결하는 고리는 ROWID가 존재, ROWID는 데이터베이스 내의 주소에 해당하는 모든 데이터는 자신만의 주소를 가지고 있음

* 인덱스
- 정렬이 되어 있음, 정렬이 이미 되어 있는 상태이므로 데이터를 찾아내서 이들을 SORT하는 과정을 생략할 수 있음
- 뒤에서부터 찾아 올라가는 descending
- 인덱스를 역순으로 찾기 때문에 가장 먼저 찾은 bno 값은 가장 큰 값을 가진 데이터가 됨. 이후 테이블에 접근해서 데이터를 가져오게 되는데, 이런 과정이 반복되면 정렬을 하지 않아도 동일하게 정렬된 결과를 볼 수 있게 됨

* 힌트
- 웹페이지의 목록은 주로 시간의 역순으로 정렬된 결과를 보여줌
- 오라클의 경우 select문을 전달할 때 hint라는 것을 사용할 수 있는데, 힌트는 데이터베이스에 select문을 실행할 때 원하는 방향으로 힌트를 주는 것이라고 생각하면됨
- 힌트 구문에서 에러가 날 경우 SQL 실행에 지장을 주지 않음
- 문법 : select /*+ 힌트이름(파라미터1,파라미터2,...)*/ 컬럼명 from 테이블명 [where 조건];
       full 힌트 : 테이블의 모든 데이터를 스캔하기 때문에 데이터가 많을 때는 상당히 느리게 실행. ex) select /*+ full(board) */ * from board order by bno desc;
       index_asc/desc : 인덱스를 순서/역순으로 이용할 것인지를 지정, 주로 order by를 위해서 사용. 인덱스 자체가 정렬을 해 둔 상태이므로 정렬 과정을 생략하기 위한 용도. 테이블명과 인덱스 명을 같이 파라미터로 사용. ex) select /*+ index_desc(board board_pk) */ * from board where bno > 0;

* ROWNUM
- 오라클데이터베이스는 페이지 처리를 위해 rownum이라는 키워드를 사용해서 데이터에 순번을 붙여 사용
- SQL이 실행된 결과에 넘버링
- select문에는 rownum이라는 변수를 이용해서 해당 데이터가 몇 번째로 나오는지 알아낼 수 있음
- rownum은 실제 데이터가 아니라 테이블에서 데이터를 추출한 후에 처리되는 변수이므로 상황에 따라 그 값이 매 번 달라질 수 있음
- 인덱스를 이용한 접근 시 rownum

* 인라인뷰
- select 문 안쪽 from에 다시 select문
- 어떤 결과를 구하는 select 문이 존재하고 그 결과를 다시 대상으로 삼아서 select 하는 것
- 문법 : select ... from (select... from...)
  ex) select bno, title
	from (
	select 
	/*+ index_desc(board board_pk) */ rownum rn, bno, title
	from board
	where rownum <= 20
	)
	where rn > 10;

* 페이징 처리
- MyBatis는 SQL을 그대로 사용할 수 있기 떄문에 인라인뷰를 이요하는 SQL을 작성하고, 필요한 파라미터를 지정하는 방식으로 페이징 처리
- 페이징 처리를 위해서 SQL을 실행할 때 몇 가지 파라미터가 필요함(페이지 번호, 한 페이지당 몇 개의 데이터를 보여줄 것인지)

* CDATA(Character Data, 문자형 데이터)
- 선언 : <![CDATA[ "쿼리" ]]> 
- ["쿼리"]안에 있는 문장은 파싱되지 않고 그대로 문자열로 출력. MyBatis에서 Mapper 파일로 작성되어 있고, 파싱될 때 XML 표준으로 파싱되는 것을 방지(select문에 조건에서 >,>=,<,<= 기호를 XML에서는 태그로 인식하는 문제를 해결)

* 페이징 화면 처리
- 브라우저 주소창에서 페이지 번호를 전달해서 결과를 확인하는 단계
- JSP에서 페이지 번호를 출력하는 단계
- 각 페이지 번호에 클릭 이벤트 처리
- 전체 데이터 개수를 반영해서 페이지 번호 조절

* 페이징 처리할 때 필요한 정보
- 현재 페이지 번호(page)
- 이전(prev), 다음(next)
- 화면에서 보여지는 페이지의 시작 번호(startPage)와 끝 번호(endPage)
※ 끝 페이지 번호를 먼저 계산하는 것이 편함 → endPage = (int)(Math.ceil(페이지번호/10.0)) * 10;

* 다중 항목 검색
- 검색 조건이 2개 이상 붙는 다중 검색일 경우 → SQL에서 and와 or의 연산자 우선 순위를 생각해야함 → and > or → 다중 검색일 경우 or를 먼저 실행해야하므로 (A like ~~ or B like ~~) and rownum <= 20

* MyBatis 동적 태그
- if : test라는 속성과 함께 조건이 true가 되었을 때 포함된 SQL을 사용하고자 할 때 작성. OGNL 표현식(간단히 Java 객체를 위한 오픈소스 표현 언어라고 생각하면 될까 https://commons.apache.org/dormant/commons-ognl/language-guide.html)
- choose : if, else if 또는 JSTL의 choose와 유사 choose when(조건1) when(조건2) ,... otherwise
- trim, where, set : if나 choose와 같은 태그들을 내포하여 SQL들을 연결해주고, 앞 뒤에 필요한 구문들(and, or, where 등)을 추가해주거나 생략하는 역할

* UriComponentsBulider 클래스
- 웹 페이지에서 매번 파라미터를 유지하는 일이 번거로울 때 이용하는 클래스
- queryParam() 메서드를 이용해서 필요한 파라미터들을 손쉽게 추가할 수 있음
- URL을 만들어주면 리다이렉트를 하거나, form 태그를 사용하는 상황을 많이 줄여 줄 수 있음
